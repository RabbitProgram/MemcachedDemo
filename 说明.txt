1、说说memcached分布式缓存的设置与应用

复制代码
            string[] servers = { "172.18.5.66:11211", "192.168.10.121:11211" };
            //初始化池
            SockIOPool pool = SockIOPool.GetInstance();
            //设置服务器列表
            pool.SetServers(servers);
            //各服务器之间负载均衡的设置比例
            pool.SetWeights(new int[] { 1, 10 });
复制代码
Note:

1、在172.18.5.66，与192.168.10.121两台机器上装memcached服务端。

2、 pool.SetWeights这里的1跟10意思是，负载均衡比例，假如11000条数据，大致数据分布为：172.18.5.66分布1000条数据左右。另外一台为10000条左右。

3、memcached服务端并不具备负载均衡的能力，而是memcachedClient实现的，具体存取数据实现的核心是采用一致性Hash算法，把key-value分布到某一台服务器中里边。





2、说说memcached的数据压缩机制

            //是否启用压缩数据：如果启用了压缩，数据压缩长于门槛的数据将被储存在压缩的形式
            cache.EnableCompression = false;
            //压缩设置，超过指定大小的都压缩 
            //cache.CompressionThreshold = 1024 * 1024; 
Note：

1、这个处理是在MemcachedClient对象中，设置这个EnableCompression属性，是否使用压缩的意思，如果启用啦压缩功能 ,则ICSharpCode.SharpZipLib类库会在数据超过预设大小时，进行数据压缩处理。

2、CompressionThreshold这个属性是压缩的阀值，默认是15K，如果超过设定的阀值则使用memcached的通讯协议，存数据时给每个数据项分配一个16为的flag表示，用作记录是否有压缩，如果有压缩则提取数据是进行解压。如果没有超过阀值则不压缩，直接存储。


4、说说memcached的故障转移处理 

           //设置SocktIO池的故障标志
            pool.Failover = true;
Note：memcached的鼓掌转移是一套正常节点发生故障变为死节点时的处理机制。

1、开启故障转移：如果发生socket异常，则该节点被添加到存放死节点属性的_hostDead中，新请求被映射到dead server，检测尝试连接死节点的时间间隔属性_hostDeadDuration（默认设置为100ms），如果没有达到设定的间隔时间则key会被映射到可用的server处理，如果达到了时间间隔，则尝试重新链接，连接成功将此节点从_hostDead中去除，连接失败则间隔时间翻倍存放，下次重新连接时间会被拉长。

2、不开启故障转移：新的请求都会被映射到dead server上，尝试重新建立socket链接，如果连接失败，返回null或者操作失败。





5、说说key-value中的key与value

1、key在服务端的长度限制为250个字符，建议使用较短的key但不要重复。

2、value的大小限制为1mb，如果大拉，可以使用压缩，如果还大，那可能拆分到多个key中。